/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PL0.jflex</tt>
 */
class PL0Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\57\1\60\1\60\1\60\22\0\1\1\1\22\4\0"+
    "\1\17\1\0\1\27\1\30\1\25\1\23\1\5\1\24\1\4\1\26"+
    "\12\3\1\7\1\6\1\20\1\16\1\21\2\0\4\2\1\33\25\2"+
    "\1\10\1\0\1\11\1\0\1\15\1\0\1\40\1\47\1\51\1\44"+
    "\1\43\1\45\1\55\1\42\1\31\1\50\1\2\1\41\1\34\1\54"+
    "\1\46\1\35\1\2\1\53\1\32\1\36\1\56\1\52\2\2\1\37"+
    "\1\2\1\12\1\14\1\13\7\0\1\60\44\0\1\2\12\0\1\2"+
    "\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0\14\2"+
    "\16\0\5\2\7\0\1\2\1\0\1\2\201\0\5\2\1\0\2\2"+
    "\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\24\2\1\0\123\2\1\0\213\2\10\0\246\2\1\0\46\2"+
    "\2\0\1\2\7\0\47\2\110\0\33\2\5\0\3\2\55\0\53\2"+
    "\25\0\12\3\4\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2"+
    "\7\0\2\2\12\3\3\2\2\0\1\2\20\0\1\2\1\0\36\2"+
    "\35\0\131\2\13\0\1\2\16\0\12\3\41\2\11\0\2\2\4\0"+
    "\1\2\5\0\26\2\4\0\1\2\11\0\1\2\3\0\1\2\27\0"+
    "\31\2\107\0\25\2\1\0\10\2\106\0\66\2\3\0\1\2\22\0"+
    "\1\2\7\0\12\2\4\0\12\3\1\0\20\2\4\0\10\2\2\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0"+
    "\1\2\20\0\1\2\15\0\2\2\1\0\3\2\4\0\12\3\2\2"+
    "\23\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\2\2\1\0\2\2\37\0\4\2\1\0\1\2\7\0\12\3"+
    "\2\0\3\2\20\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\5\2\3\0\1\2\22\0\1\2\17\0\2\2"+
    "\4\0\12\3\11\0\1\2\13\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2\36\0\2\2"+
    "\1\0\3\2\4\0\12\3\1\0\1\2\21\0\1\2\1\0\6\2"+
    "\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2"+
    "\3\0\2\2\3\0\3\2\3\0\14\2\26\0\1\2\25\0\12\3"+
    "\25\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2\3\0\1\2"+
    "\32\0\3\2\5\0\2\2\4\0\12\3\20\0\1\2\4\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2"+
    "\40\0\1\2\1\0\2\2\4\0\12\3\1\0\2\2\22\0\10\2"+
    "\1\0\3\2\1\0\51\2\2\0\1\2\20\0\1\2\5\0\3\2"+
    "\10\0\3\2\4\0\12\3\12\0\6\2\5\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\37\0\12\3\21\0\60\2"+
    "\1\0\2\2\14\0\7\2\11\0\12\3\47\0\2\2\1\0\1\2"+
    "\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2"+
    "\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\3"+
    "\2\0\4\2\40\0\1\2\37\0\12\3\26\0\10\2\1\0\44\2"+
    "\33\0\5\2\163\0\53\2\24\0\1\2\12\3\6\0\6\2\4\0"+
    "\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0"+
    "\1\2\1\0\12\3\6\0\46\2\1\0\1\2\5\0\1\2\2\0"+
    "\53\2\1\0\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0"+
    "\4\2\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0"+
    "\7\2\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0"+
    "\4\2\2\0\103\2\45\0\20\2\20\0\126\2\2\0\6\2\3\0"+
    "\u026c\2\2\0\21\2\1\0\32\2\5\0\113\2\6\0\10\2\7\0"+
    "\15\2\1\0\4\2\16\0\22\2\16\0\22\2\16\0\15\2\1\0"+
    "\3\2\17\0\64\2\43\0\1\2\4\0\1\2\3\0\12\3\46\0"+
    "\12\3\6\0\130\2\10\0\5\2\2\0\42\2\1\0\1\2\5\0"+
    "\106\2\12\0\37\2\47\0\12\3\36\2\2\0\5\2\13\0\54\2"+
    "\4\0\32\2\6\0\12\3\46\0\27\2\11\0\65\2\53\0\12\3"+
    "\6\0\12\3\15\0\1\2\135\0\57\2\21\0\7\2\4\0\12\3"+
    "\51\0\36\2\15\0\2\2\12\3\54\2\32\0\44\2\34\0\12\3"+
    "\3\0\3\2\12\3\44\2\2\0\11\2\140\0\4\2\1\0\4\2"+
    "\3\0\2\2\11\0\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\53\0\1\60\1\60\107\0\1\2\15\0\1\2\20\0"+
    "\15\2\145\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0"+
    "\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0"+
    "\13\2\2\0\4\2\5\0\5\2\4\0\1\2\64\0\2\2\u0a7b\0"+
    "\57\2\1\0\57\2\1\0\205\2\6\0\4\2\3\0\2\2\14\0"+
    "\46\2\1\0\1\2\5\0\1\2\2\0\70\2\7\0\1\2\20\0"+
    "\27\2\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0"+
    "\7\2\1\0\7\2\1\0\7\2\1\0\7\2\120\0\1\2\u01d5\0"+
    "\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0"+
    "\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0"+
    "\20\2\u0200\0\u19b6\2\112\0\u51d6\2\52\0\u048d\2\103\0\56\2\2\0"+
    "\u010d\2\3\0\20\2\12\3\2\2\24\0\57\2\20\0\37\2\2\0"+
    "\106\2\61\0\11\2\2\0\147\2\2\0\44\2\1\0\10\2\77\0"+
    "\13\2\1\0\3\2\1\0\4\2\1\0\27\2\35\0\64\2\16\0"+
    "\62\2\34\0\12\3\30\0\6\2\3\0\1\2\1\0\1\2\2\0"+
    "\12\3\34\2\12\0\27\2\31\0\35\2\7\0\57\2\34\0\1\2"+
    "\12\3\6\0\5\2\1\0\12\2\12\3\5\2\1\0\51\2\27\0"+
    "\3\2\1\0\10\2\4\0\12\3\6\0\27\2\3\0\1\2\3\0"+
    "\62\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0"+
    "\1\2\30\0\3\2\2\0\13\2\7\0\3\2\14\0\6\2\2\0"+
    "\6\2\2\0\6\2\11\0\7\2\1\0\7\2\1\0\53\2\1\0"+
    "\12\2\12\0\163\2\15\0\12\3\6\0\u2ba4\2\14\0\27\2\4\0"+
    "\61\2\u2104\0\u016e\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0"+
    "\1\2\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0"+
    "\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0"+
    "\66\2\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\3\7\0"+
    "\32\2\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0"+
    "\6\2\2\0\3\2\43\0\14\2\1\0\32\2\1\0\23\2\1\0"+
    "\2\2\1\0\17\2\2\0\16\2\42\0\173\2\u0185\0\35\2\3\0"+
    "\61\2\57\0\40\2\20\0\21\2\1\0\10\2\6\0\46\2\12\0"+
    "\36\2\2\0\44\2\4\0\10\2\60\0\236\2\2\0\12\3\6\0"+
    "\44\2\4\0\44\2\4\0\50\2\10\0\64\2\234\0\u0137\2\11\0"+
    "\26\2\12\0\10\2\230\0\6\2\2\0\1\2\1\0\54\2\1\0"+
    "\2\2\3\0\1\2\2\0\27\2\12\0\27\2\11\0\37\2\101\0"+
    "\23\2\1\0\2\2\12\0\26\2\12\0\32\2\106\0\70\2\6\0"+
    "\2\2\100\0\1\2\17\0\4\2\1\0\3\2\1\0\33\2\54\0"+
    "\35\2\3\0\35\2\43\0\10\2\1\0\34\2\33\0\66\2\12\0"+
    "\26\2\12\0\23\2\15\0\22\2\156\0\111\2\67\0\63\2\15\0"+
    "\63\2\u0310\0\65\2\56\0\12\3\23\0\55\2\40\0\31\2\7\0"+
    "\12\3\11\0\44\2\17\0\12\3\20\0\43\2\3\0\1\2\14\0"+
    "\60\2\16\0\4\2\13\0\12\3\1\2\1\0\1\2\43\0\22\2"+
    "\1\0\31\2\124\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2"+
    "\1\0\12\2\7\0\57\2\21\0\12\3\13\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\14\0\5\2\236\0\65\2\22\0\4\2\5\0\12\3"+
    "\46\0\60\2\24\0\2\2\1\0\1\2\10\0\12\3\246\0\57\2"+
    "\51\0\4\2\44\0\60\2\24\0\1\2\13\0\12\3\46\0\53\2"+
    "\25\0\12\3\66\0\32\2\26\0\12\3\u0166\0\100\2\12\3\25\0"+
    "\1\2\u01c0\0\71\2\u0107\0\11\2\1\0\45\2\21\0\1\2\17\0"+
    "\12\3\30\0\36\2\u0370\0\u039a\2\346\0\304\2\u0abc\0\u042f\2\u0fd1\0"+
    "\u0247\2\u21b9\0\u0239\2\7\0\37\2\1\0\12\3\146\0\36\2\22\0"+
    "\60\2\20\0\4\2\14\0\12\3\11\0\25\2\5\0\23\2\u0370\0"+
    "\105\2\13\0\1\2\102\0\15\2\100\0\1\2\37\0\u17ed\2\23\0"+
    "\u02f3\2\u250d\0\2\2\u0bfe\0\153\2\5\0\15\2\3\0\11\2\7\0"+
    "\12\2\u1766\0\125\2\1\0\107\2\1\0\2\2\2\0\1\2\2\0"+
    "\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0"+
    "\101\2\1\0\4\2\2\0\10\2\1\0\7\2\1\0\34\2\1\0"+
    "\4\2\1\0\5\2\1\0\1\2\3\0\7\2\1\0\u0154\2\2\0"+
    "\31\2\1\0\31\2\1\0\37\2\1\0\31\2\1\0\37\2\1\0"+
    "\31\2\1\0\37\2\1\0\31\2\1\0\37\2\1\0\31\2\1\0"+
    "\10\2\2\0\62\3\u1000\0\305\2\73\0\104\2\14\0\12\3\u04a6\0"+
    "\4\2\1\0\33\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0"+
    "\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0"+
    "\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0"+
    "\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\21\2\5\0"+
    "\3\2\1\0\5\2\1\0\21\2\u1144\0\ua6d7\2\51\0\u1035\2\13\0"+
    "\336\2\2\0\u1682\2\u295e\0\u021e\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\20\3\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\3\1\37\1\40\14\3\1\41\12\3"+
    "\1\42\15\3\1\43\1\44\5\3\1\45\2\3\1\46"+
    "\4\3\1\47\1\3\1\50\1\51\1\52\1\3\1\53"+
    "\1\54\1\55\1\56\3\3\1\57\4\3\1\60\1\3"+
    "\1\61\1\3\1\62\1\3\1\63\1\3\1\64\3\3"+
    "\1\65\1\0\2\3\1\66\1\3\1\67\1\3\1\70"+
    "\1\0\1\3\1\71\1\72\1\73\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\223\0\61\0\61\0\61"+
    "\0\304\0\61\0\61\0\61\0\61\0\365\0\61\0\61"+
    "\0\u0126\0\u0157\0\u0188\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\u04c9\0\142\0\142\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\142\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\142\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\142\0\142\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\142\0\u0ca2\0\u0cd3\0\142\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\142\0\u0dc8\0\142\0\142\0\142\0\u0df9\0\142\0\142"+
    "\0\142\0\142\0\u0e2a\0\u0e5b\0\u0e8c\0\142\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\142\0\u0f81\0\u0fb2\0\u0fe3\0\142\0\u1014"+
    "\0\142\0\u1045\0\142\0\u1076\0\u10a7\0\u10d8\0\142\0\u1109"+
    "\0\u113a\0\u116b\0\142\0\u119c\0\142\0\u11cd\0\142\0\u11fe"+
    "\0\u122f\0\142\0\142\0\142\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\61\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\4\1\35\1\36\1\37\1\4"+
    "\1\40\1\41\1\42\1\43\1\44\1\4\1\45\1\46"+
    "\1\4\1\47\1\50\1\51\1\52\2\4\1\3\64\0"+
    "\2\4\25\0\26\4\5\0\1\5\64\0\1\53\6\0"+
    "\1\54\56\0\1\55\63\0\1\56\57\0\1\57\2\0"+
    "\1\60\55\0\1\61\44\0\2\4\25\0\1\4\1\62"+
    "\12\4\1\63\1\64\5\4\1\65\2\4\4\0\2\4"+
    "\25\0\5\4\1\66\12\4\1\67\5\4\4\0\2\4"+
    "\25\0\7\4\1\70\16\4\4\0\2\4\25\0\22\4"+
    "\1\71\3\4\4\0\2\4\25\0\7\4\1\72\1\4"+
    "\1\73\14\4\4\0\2\4\25\0\22\4\1\74\3\4"+
    "\4\0\2\4\25\0\1\75\25\4\4\0\2\4\25\0"+
    "\12\4\1\76\13\4\4\0\2\4\25\0\10\4\1\77"+
    "\15\4\4\0\2\4\25\0\12\4\1\100\2\4\1\101"+
    "\10\4\4\0\2\4\25\0\13\4\1\102\2\4\1\103"+
    "\7\4\4\0\2\4\25\0\12\4\1\104\2\4\1\105"+
    "\10\4\4\0\2\4\25\0\7\4\1\106\5\4\1\107"+
    "\10\4\4\0\2\4\25\0\7\4\1\110\16\4\4\0"+
    "\2\4\25\0\12\4\1\111\13\4\4\0\2\4\25\0"+
    "\1\112\25\4\4\0\2\4\25\0\2\4\1\113\23\4"+
    "\4\0\2\4\25\0\5\4\1\114\20\4\4\0\2\4"+
    "\25\0\13\4\1\115\6\4\1\116\3\4\4\0\2\4"+
    "\25\0\7\4\1\117\16\4\4\0\2\4\25\0\1\120"+
    "\25\4\4\0\2\4\25\0\1\121\14\4\1\122\10\4"+
    "\4\0\2\4\25\0\1\123\25\4\4\0\2\4\25\0"+
    "\12\4\1\124\13\4\4\0\2\4\25\0\22\4\1\125"+
    "\1\4\1\126\1\4\4\0\2\4\25\0\1\4\1\127"+
    "\24\4\4\0\2\4\25\0\7\4\1\130\16\4\4\0"+
    "\2\4\25\0\1\4\1\131\24\4\4\0\2\4\25\0"+
    "\14\4\1\132\11\4\4\0\2\4\25\0\13\4\1\133"+
    "\12\4\4\0\2\4\25\0\17\4\1\134\6\4\4\0"+
    "\2\4\25\0\24\4\1\135\1\4\4\0\2\4\25\0"+
    "\15\4\1\136\10\4\4\0\2\4\25\0\10\4\1\137"+
    "\15\4\4\0\2\4\25\0\23\4\1\140\2\4\4\0"+
    "\2\4\25\0\22\4\1\141\3\4\4\0\2\4\25\0"+
    "\5\4\1\142\1\4\1\143\16\4\4\0\2\4\25\0"+
    "\10\4\1\144\15\4\4\0\2\4\25\0\3\4\1\145"+
    "\22\4\4\0\2\4\25\0\1\146\25\4\4\0\2\4"+
    "\25\0\1\147\25\4\4\0\2\4\25\0\10\4\1\150"+
    "\15\4\4\0\2\4\25\0\23\4\1\151\2\4\4\0"+
    "\2\4\25\0\23\4\1\152\2\4\4\0\2\4\25\0"+
    "\20\4\1\153\5\4\4\0\2\4\25\0\10\4\1\154"+
    "\15\4\4\0\2\4\25\0\23\4\1\155\2\4\4\0"+
    "\2\4\25\0\7\4\1\156\16\4\4\0\2\4\25\0"+
    "\1\4\1\157\24\4\4\0\2\4\25\0\5\4\1\160"+
    "\20\4\4\0\2\4\25\0\13\4\1\161\12\4\4\0"+
    "\2\4\25\0\12\4\1\162\13\4\4\0\2\4\25\0"+
    "\12\4\1\163\13\4\4\0\2\4\25\0\1\164\25\4"+
    "\4\0\2\4\25\0\10\4\1\165\15\4\4\0\2\4"+
    "\25\0\10\4\1\166\15\4\4\0\2\4\25\0\1\4"+
    "\1\167\24\4\4\0\2\4\25\0\25\4\1\170\4\0"+
    "\2\4\25\0\13\4\1\171\12\4\4\0\2\4\25\0"+
    "\4\4\1\172\21\4\4\0\2\4\25\0\23\4\1\173"+
    "\2\4\4\0\2\4\25\0\23\4\1\174\2\4\4\0"+
    "\2\4\25\0\7\4\1\175\16\4\4\0\2\4\25\0"+
    "\5\4\1\176\20\4\4\0\2\4\25\0\6\4\1\177"+
    "\17\4\4\0\2\4\25\0\20\4\1\200\5\4\4\0"+
    "\2\4\25\0\23\4\1\201\2\4\4\0\2\4\25\0"+
    "\12\4\1\202\13\4\4\0\2\4\25\0\5\4\1\203"+
    "\20\4\4\0\2\4\25\0\22\4\1\204\3\4\4\0"+
    "\2\4\25\0\1\205\25\4\4\0\2\4\25\0\5\4"+
    "\1\206\20\4\4\0\2\4\25\0\24\4\1\207\1\4"+
    "\2\0\2\210\2\211\25\210\26\211\4\0\2\4\25\0"+
    "\10\4\1\212\15\4\4\0\2\4\25\0\5\4\1\213"+
    "\20\4\4\0\2\4\25\0\7\4\1\214\16\4\4\0"+
    "\2\4\25\0\23\4\1\215\2\4\4\0\2\4\25\0"+
    "\23\4\1\216\2\4\4\0\2\4\25\0\6\4\1\217"+
    "\17\4\33\0\1\220\31\0\2\4\25\0\1\221\25\4"+
    "\4\0\2\4\25\0\23\4\1\222\2\4\4\0\2\4"+
    "\25\0\23\4\1\223\2\4\4\0\2\4\25\0\5\4"+
    "\1\224\20\4\50\0\1\225\14\0\2\4\25\0\15\4"+
    "\1\226\10\4\2\0\57\227\2\0\2\227\2\230\25\227"+
    "\26\230\34\0\1\231\30\0\2\4\25\0\1\4\1\232"+
    "\24\4\40\0\1\233\24\0\2\4\25\0\5\4\1\234"+
    "\20\4\46\0\1\235\16\0\2\4\25\0\13\4\1\236"+
    "\12\4\33\0\1\237\31\0\2\4\25\0\1\240\25\4"+
    "\56\0\1\241\6\0\2\4\25\0\23\4\1\242\2\4"+
    "\2\0\57\243\2\0\2\243\2\244\25\243\26\244\55\0"+
    "\1\245\7\0\2\4\25\0\22\4\1\246\3\4\45\0"+
    "\1\247\17\0\2\4\25\0\12\4\1\250\13\4\42\0"+
    "\1\251\22\0\2\4\25\0\7\4\1\252\16\4\46\0"+
    "\1\253\16\0\2\4\25\0\13\4\1\254\12\4\33\0"+
    "\1\255\31\0\2\4\25\0\1\256\25\4\56\0\1\257"+
    "\6\0\2\4\25\0\23\4\1\260\2\4\40\0\1\261"+
    "\24\0\2\4\25\0\5\4\1\262\20\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6076];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\3\11\1\1\4\11\1\1\2\11"+
    "\3\1\7\11\20\1\7\11\126\1\1\0\7\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private void echo () { System . out . print (yytext ()); }

  public int position () { return yycolumn; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PL0Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2620) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   { return new Token (Symbol . EOF); }
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { echo (); ErrorMessage . print (yycolumn, "Illegal character");
            } 
            // fall through
          case 61: break;
          case 2: 
            { echo ();
            } 
            // fall through
          case 62: break;
          case 3: 
            { echo (); return new Token (Symbol . ID, yytext ());
            } 
            // fall through
          case 63: break;
          case 4: 
            { echo (); return new Token (Symbol . INTEGER, yytext ());
            } 
            // fall through
          case 64: break;
          case 5: 
            { echo (); return new Token (Symbol . PERIOD);
            } 
            // fall through
          case 65: break;
          case 6: 
            { echo (); return new Token (Symbol . COMMA);
            } 
            // fall through
          case 66: break;
          case 7: 
            { echo (); return new Token (Symbol . SEMICOLON);
            } 
            // fall through
          case 67: break;
          case 8: 
            { echo (); return new Token (Symbol . COLON);
            } 
            // fall through
          case 68: break;
          case 9: 
            { echo (); return new Token (Symbol . LBRACKET);
            } 
            // fall through
          case 69: break;
          case 10: 
            { echo (); return new Token (Symbol . RBRACKET);
            } 
            // fall through
          case 70: break;
          case 11: 
            { echo (); return new Token (Symbol . LBRACE);
            } 
            // fall through
          case 71: break;
          case 12: 
            { echo (); return new Token (Symbol . RBRACE);
            } 
            // fall through
          case 72: break;
          case 13: 
            { echo (); return new Token (Symbol . UNDERSCORE);
            } 
            // fall through
          case 73: break;
          case 14: 
            { echo (); return new Token (Symbol . EQ);
            } 
            // fall through
          case 74: break;
          case 15: 
            { echo (); return new Token (Symbol . LT);
            } 
            // fall through
          case 75: break;
          case 16: 
            { echo (); return new Token (Symbol . GT);
            } 
            // fall through
          case 76: break;
          case 17: 
            { echo (); return new Token (Symbol . NOT);
            } 
            // fall through
          case 77: break;
          case 18: 
            { echo (); return new Token (Symbol . PLUS);
            } 
            // fall through
          case 78: break;
          case 19: 
            { echo (); return new Token (Symbol . MINUS);
            } 
            // fall through
          case 79: break;
          case 20: 
            { echo (); return new Token (Symbol . TIMES);
            } 
            // fall through
          case 80: break;
          case 21: 
            { echo (); return new Token (Symbol . DIV);
            } 
            // fall through
          case 81: break;
          case 22: 
            { echo (); return new Token (Symbol . LPAREN);
            } 
            // fall through
          case 82: break;
          case 23: 
            { echo (); return new Token (Symbol . RPAREN);
            } 
            // fall through
          case 83: break;
          case 24: 
            { echo (); return new Token (Symbol . DOUBLE_COLON);
            } 
            // fall through
          case 84: break;
          case 25: 
            { echo (); return new Token (Symbol . ASSIGN);
            } 
            // fall through
          case 85: break;
          case 26: 
            { echo (); return new Token (Symbol . OR);
            } 
            // fall through
          case 86: break;
          case 27: 
            { echo (); return new Token (Symbol . AND);
            } 
            // fall through
          case 87: break;
          case 28: 
            { echo (); return new Token (Symbol . LE);
            } 
            // fall through
          case 88: break;
          case 29: 
            { echo (); return new Token (Symbol . NE);
            } 
            // fall through
          case 89: break;
          case 30: 
            { echo (); return new Token (Symbol . GE);
            } 
            // fall through
          case 90: break;
          case 31: 
            { echo (); return new Token (Symbol . IF);
            } 
            // fall through
          case 91: break;
          case 32: 
            { echo (); return new Token (Symbol . IO);
            } 
            // fall through
          case 92: break;
          case 33: 
            { echo (); return new Token (Symbol . DO);
            } 
            // fall through
          case 93: break;
          case 34: 
            { echo (); return new Token (Symbol . INT);
            } 
            // fall through
          case 94: break;
          case 35: 
            { echo (); return new Token (Symbol . DEF);
            } 
            // fall through
          case 95: break;
          case 36: 
            { echo (); return new Token (Symbol . ODD);
            } 
            // fall through
          case 96: break;
          case 37: 
            { echo (); return new Token (Symbol . VAR);
            } 
            // fall through
          case 97: break;
          case 38: 
            { echo (); return new Token (Symbol . NIL);
            } 
            // fall through
          case 98: break;
          case 39: 
            { echo (); return new Token (Symbol . MAIN);
            } 
            // fall through
          case 99: break;
          case 40: 
            { echo (); return new Token (Symbol . PROC);
            } 
            // fall through
          case 100: break;
          case 41: 
            { echo (); return new Token (Symbol . TAIL);
            } 
            // fall through
          case 101: break;
          case 42: 
            { echo (); return new Token (Symbol . THEN);
            } 
            // fall through
          case 102: break;
          case 43: 
            { echo (); return new Token (Symbol . ARGS);
            } 
            // fall through
          case 103: break;
          case 44: 
            { echo (); return new Token (Symbol . LIST);
            } 
            // fall through
          case 104: break;
          case 45: 
            { echo (); return new Token (Symbol . HEAD);
            } 
            // fall through
          case 105: break;
          case 46: 
            { echo (); return new Token (Symbol . ELSE);
            } 
            // fall through
          case 106: break;
          case 47: 
            { echo (); return new Token (Symbol . CALL);
            } 
            // fall through
          case 107: break;
          case 48: 
            { echo (); return new Token (Symbol . STDIN);
            } 
            // fall through
          case 108: break;
          case 49: 
            { echo (); return new Token (Symbol . SCALA);
            } 
            // fall through
          case 109: break;
          case 50: 
            { echo (); return new Token (Symbol . ARRAY);
            } 
            // fall through
          case 110: break;
          case 51: 
            { echo (); return new Token (Symbol . BEGIN);
            } 
            // fall through
          case 111: break;
          case 52: 
            { echo (); return new Token (Symbol . CONST);
            } 
            // fall through
          case 112: break;
          case 53: 
            { echo (); return new Token (Symbol . STRING);
            } 
            // fall through
          case 113: break;
          case 54: 
            { echo (); return new Token (Symbol . OBJECT);
            } 
            // fall through
          case 114: break;
          case 55: 
            { echo (); return new Token (Symbol . RETURN);
            } 
            // fall through
          case 115: break;
          case 56: 
            { echo (); return new Token (Symbol . ISEMPTY);
            } 
            // fall through
          case 116: break;
          case 57: 
            { echo (); return new Token (Symbol . PRINTLN);
            } 
            // fall through
          case 117: break;
          case 58: 
            { echo (); return new Token (Symbol . BOOLEAN);
            } 
            // fall through
          case 118: break;
          case 59: 
            { echo (); return new Token (Symbol . READINT);
            } 
            // fall through
          case 119: break;
          case 60: 
            { echo (); return new Token (Symbol . SCALA_PERIOD_IO_PERIOD_STDIN_PERIOD_READINT);
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
